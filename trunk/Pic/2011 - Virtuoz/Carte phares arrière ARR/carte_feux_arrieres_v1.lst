CCS PCH C Compiler, Version 4.057, 32216               27-avr.-11 17:03

               Filename: C:\Users\Hugo\Centrale Lyon\EPSA\Electronique Virtuoz - Programmation\2011 - Virtuoz\Carte phares arrière ARR\carte_feux_arrieres_v1.lst

               ROM used: 1744 bytes (5%)
                         Largest free fragment is 31020
               RAM used: 27 (2%) at main() level
                         71 (5%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  GOTO   04E4
*
0008:  MOVWF  05
000A:  MOVFF  FD8,06
000E:  MOVFF  FE0,07
0012:  MOVLB  0
0014:  MOVFF  FE9,0D
0018:  MOVFF  FEA,08
001C:  MOVFF  FE1,09
0020:  MOVFF  FE2,0A
0024:  MOVFF  FD9,0B
0028:  MOVFF  FDA,0C
002C:  MOVFF  FF3,14
0030:  MOVFF  FF4,15
0034:  MOVFF  FFA,16
0038:  MOVFF  00,0F
003C:  MOVFF  01,10
0040:  MOVFF  02,11
0044:  MOVFF  03,12
0048:  MOVFF  04,13
004C:  BTFSS  F9D.1
004E:  GOTO   0058
0052:  BTFSC  F9E.1
0054:  GOTO   009E
0058:  MOVFF  0F,00
005C:  MOVFF  10,01
0060:  MOVFF  11,02
0064:  MOVFF  12,03
0068:  MOVFF  13,04
006C:  BSF    0E.7
006E:  MOVFF  0D,FE9
0072:  MOVFF  08,FEA
0076:  MOVFF  09,FE1
007A:  MOVFF  0A,FE2
007E:  MOVFF  0B,FD9
0082:  MOVFF  0C,FDA
0086:  MOVFF  14,FF3
008A:  MOVFF  15,FF4
008E:  MOVFF  16,FFA
0092:  MOVF   05,W
0094:  MOVFF  07,FE0
0098:  MOVFF  06,FD8
009C:  RETFIE 0
.................... //      Carte Feux Arrières 
.................... //      Version 1.0 - HDT - 02/03/2011 
.................... //      Version 1.1 - HDT - 18/04/2011 
.................... //      Version 1.2 - HDT - 22/04/2011 
.................... // 
....................  
.................... #include <18F2580.h> 
.................... //////// Standard Header file for the PIC18F2580 device //////////////// 
.................... #device PIC18F2580 
.................... #list 
....................  
.................... #include <can-18xxx8.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.c                             //// 
.................... //// CAN Library routines for Microchip's PIC18Cxx8 and 18Fxx8 line  //// 
.................... ////                                                                 //// 
.................... //// This library provides the following functions:                  //// 
.................... ////  (for more information on these functions see the comment       //// 
.................... ////   header above each function)                                   //// 
.................... ////                                                                 //// 
.................... ////    can_init - Configures the PIC18xxx8 CAN peripheral           //// 
.................... ////                                                                 //// 
.................... ////    can_set_baud - Sets the baud rate control registers          //// 
.................... ////                                                                 //// 
.................... ////    can_set_mode - Sets the CAN module into a specific mode      //// 
.................... ////                                                                 //// 
.................... ////    can_set_id - Sets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_get_id - Gets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_putd - Sends a message/request with specified ID         //// 
.................... ////                                                                 //// 
.................... ////    can_getd - Returns specifid message/request and ID           //// 
.................... ////                                                                 //// 
.................... ////    can_kbhit - Returns true if there is data in one of the      //// 
.................... ////                receive buffers                                  //// 
.................... ////                                                                 //// 
.................... ////    can_tbe - Returns true if the transmit buffer is ready to    //// 
.................... ////              send more data                                     //// 
.................... ////                                                                 //// 
.................... ////    can_abort - Aborts all pending transmissions                 //// 
.................... ////                                                                 //// 
.................... //// PIN_B3 is CANRX, and PIN_B2 is CANTX.  You will need a CAN      //// 
.................... //// transeiver to connect these pins to CANH and CANL bus lines.    //// 
.................... ////                                                                 //// 
.................... //// CCS provides an example, ex_can.c, which shows how to use this  //// 
.................... //// library.                                                        //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History                                                 //// 
.................... ////                                                                 //// 
.................... ////  Jul 27 04 - can_init() uses CAN_USE_EXTENDED_ID instead of     //// 
.................... ////              setting all RX filters to extended.                //// 
.................... ////                                                                 //// 
.................... ////  Feb 24 04 - can_get_id() fixed for EID<18:20>.                 //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <can-18xxx8.h> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.h                             //// 
.................... ////                                                                 //// 
.................... //// Prototypes, definitions, defines and macros used for and with   //// 
.................... //// the CCS CAN library for PIC18Fxx8 and PIC18Cxx8.                //// 
.................... ////                                                                 //// 
.................... //// (see can-18xxx8.c)                                              //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __CCS_CAN18xxx8_LIB_DEFINES__ 
.................... #define __CCS_CAN18xxx8_LIB_DEFINES__ 
....................  
.................... #ifndef CAN_DO_DEBUG 
....................  #define CAN_DO_DEBUG FALSE 
.................... #endif 
....................  
.................... #IFNDEF CAN_USE_EXTENDED_ID 
....................   #define CAN_USE_EXTENDED_ID         TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_SYNCH_JUMP_WIDTH 
....................   #define CAN_BRG_SYNCH_JUMP_WIDTH  0  //synchronized jump width (def: 1 x Tq) 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_PRESCALAR 
....................   #define CAN_BRG_PRESCALAR  4  //baud rate generator prescalar (def: 4) ( Tq = (2 x (PRE + 1))/Fosc ) 
.................... #ENDIF 
....................  
.................... #ifndef CAN_BRG_SEG_2_PHASE_TS 
....................  #define CAN_BRG_SEG_2_PHASE_TS   TRUE //phase segment 2 time select bit (def: freely programmable) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_SAM 
....................  #define CAN_BRG_SAM 0 //sample of the can bus line (def: bus line is sampled 1 times prior to sample point) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_1 
....................  #define CAN_BRG_PHASE_SEGMENT_1  5 //phase segment 1 (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PROPAGATION_TIME 
....................  #define CAN_BRG_PROPAGATION_TIME 2 //propagation time select (def: 3 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_WAKE_FILTER 
....................  #define CAN_BRG_WAKE_FILTER FALSE   //selects can bus line filter for wake up bit 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_2 
....................  #define CAN_BRG_PHASE_SEGMENT_2 5 //phase segment 2 time select (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_USE_RX_DOUBLE_BUFFER 
....................  #define CAN_USE_RX_DOUBLE_BUFFER TRUE   //if buffer 0 overflows, do NOT use buffer 1 to put buffer 0 data 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_DRIVE_HIGH 
....................  #define CAN_ENABLE_DRIVE_HIGH 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CAN_CAPTURE 
....................  #define CAN_ENABLE_CAN_CAPTURE 0 
.................... #endif 
....................  
.................... enum CAN_OP_MODE {CAN_OP_CONFIG=4, CAN_OP_LISTEN=3, CAN_OP_LOOPBACK=2, CAN_OP_DISABLE=1, CAN_OP_NORMAL=0}; 
.................... enum CAN_WIN_ADDRESS {CAN_WIN_RX0=0, CAN_WIN_RX1=5, CAN_WIN_TX0=4, CAN_WIN_TX1=3, CAN_WIN_TX2=2}; 
....................  
.................... //can control 
.................... struct { 
.................... 	int1 void0; //0 
.................... 	CAN_WIN_ADDRESS win:3;	//1:3 //window address bits 
.................... 	int1 abat;	//4 //abort all pending transmissions 
.................... 	CAN_OP_MODE reqop:3;	//5:7	//request can operation mode bits 
.................... } CANCON; 
.................... #byte CANCON = 0xF6F 
....................  
....................  
.................... enum CAN_INT_CODE {CAN_INT_WAKEUP=7, CAN_INT_RX0=6, CAN_INT_RX1=5, CAN_INT_TX0=4, CAN_INT_TX1=3, CAN_INT_TX2=2, CAN_INT_ERROR=1, CAN_INT_NO=0}; 
....................  
.................... //can status register READ-ONLY 
.................... struct { 
.................... 	int1 void0;	//0 
.................... 	CAN_INT_CODE icode:3;	//1:3	//interrupt code 
.................... 	int1 void4;	//4 
.................... 	CAN_OP_MODE opmode:3;	//5:7	//operation mode status 
.................... } CANSTAT; 
.................... #byte CANSTAT = 0xF6E 
....................  
.................... //communication status register READ-ONLY 
.................... struct { 
.................... 	int1 ewarn;		//0 //error warning 
.................... 	int1 rxwarn;		//1 //receiver warning 
.................... 	int1 txwarn;		//2 //transmitter warning 
.................... 	int1 rxbp;	//3 //receiver bus passive 
.................... 	int1 txbp;	//4 //transmitter bus passive bit 
.................... 	int1 txbo;	//5	//transmitter bus off 
.................... 	int1 rx1ovfl;	//6	//receive buffer 1 overflow 
.................... 	int1 rx0ovfl;	//7	//receive buffer 0 overflow 
.................... } COMSTAT; 
.................... #byte COMSTAT=0xF74 
....................  
.................... //baud rate control register 1 
.................... struct { 
.................... 	int brp:6;	//0:5	//baud rate prescalar 
.................... 	int sjw:2;	//6:7	//synchronized jump width 
.................... } BRGCON1; 
.................... #byte BRGCON1=0xF70 
....................  
.................... //baud rate control register 2 
.................... struct { 
.................... 	int prseg:3; //0:2 //propagation time select 
.................... 	int seg1ph:3; //3:5 //phase segment 1 
.................... 	int1 sam; //6 //sample of the can bus line 
.................... 	int1 seg2phts; //7 //phase segment 2 time select 
.................... } BRGCON2; 
.................... #byte BRGCON2=0xF71 
....................  
.................... //baud rate control register 3 
.................... struct { 
.................... 	int seg2ph:3;	//0:2	//phase segment 2 time select 
.................... 	int void543:3;	//3:5 
.................... 	int1 wakfil;	//6 //selects can bus line filter for wake-up 
.................... 	int1 void7;	//7 
.................... } BRGCON3; 
.................... #byte BRGCON3=0xF72 
....................  
.................... //can i/o control register 
.................... struct { 
.................... 	int void3210:4;	//0:3 
.................... 	int1 cancap;	//4 //can message receive caputre 
.................... 	int1 endrhi;	//5 //enable drive high 
.................... 	int void76:2;	//6:7 
.................... } CIOCON; 
.................... #byte CIOCON=0xF73 
....................  
.................... //transmit buffer n control register 
.................... struct txbNcon_struct { 
.................... 	int  txpri:2;	//0:1	//transmit priority bits 
.................... 	int1 void2; //2 
.................... 	int1 txreq;	//3	//transmit request status (clear to request message abort) 
.................... 	int1 txerr;	//4	//transmission error detected 
.................... 	int1 txlarb;	//5	//transmission lost arbitration status 
.................... 	int1 txabt;	//6	//transmission aborted status 
.................... 	int1 void7; 
.................... }; 
.................... struct txbNcon_struct TXB0CON; 
.................... struct txbNcon_struct TXB1CON; 
.................... struct txbNcon_struct TXB2CON; 
.................... struct txbNcon_struct TXBaCON; 
.................... #byte	TXB0CON=0xF40 
.................... #byte	TXB1CON=0xF30 
.................... #byte	TXB2CON=0xF20 
.................... #byte TXBaCON=0xF60 //txbXcon when in the access bank 
....................  
....................  
.................... //transmit buffer n standard identifier 
.................... #byte TXB0SIDH=0xF41 
.................... #byte TXB0SIDL=0xF42 
.................... #byte TXB1SIDH=0xF31 
.................... #byte TXB1SIDL=0xF32 
.................... #byte TXB2SIDH=0xF21 
.................... #byte TXB2SIDL=0xF22 
....................  
.................... //transmit buffer n extended identifier 
.................... #byte TXB0EIDH=0xF43 
.................... #byte TXB0EIDL=0xF44 
.................... #byte TXB1EIDH=0xF33 
.................... #byte TXB1EIDL=0xF34 
.................... #byte TXB2EIDH=0xF23 
.................... #byte TXB2EIDL=0xF24 
....................  
.................... #define RX0MASK      0xF1B    //rxm0eidl 
.................... #define RX1MASK      0xF1F    //rxm1eidl 
.................... #define RX0FILTER0   0xF03    //rxf0eidl 
.................... #define RX0FILTER1   0xF07    //rxf1eidl 
.................... #define RX1FILTER2   0xF0B    //rxf2eidl 
.................... #define RX1FILTER3   0xF0F    //rxf3eidl 
.................... #define RX1FILTER4   0xF13    //rxf4eidl 
.................... #define RX1FILTER5   0xF17    //rxf5eidl 
.................... #define RXB0ID       0xF64    //rxb0eidl 
.................... #define RXB1ID       0xF54    //rxb1eidl 
.................... #define TXB0ID       0xF44    //txb0eidl 
.................... #define TXB1ID       0xF34    //txb1eidl 
.................... #define TXB2ID       0xF24    //tsb2eidl 
.................... #define TXRXBaID     0xF64 
....................  
.................... //transmit buffer n data byte m 
.................... #byte TXB0D0=0xF46 
.................... #byte TXB0D7=0xF4D 
.................... #byte TXB1D0=0xF36 
.................... #byte TXB1D7=0xF3D 
.................... #byte TXB2D0=0xF26 
.................... #byte TXB2D7=0xF2D 
....................  
.................... //transmit buffer n data length 
.................... struct txbNdlc_struct { 
.................... 	int dlc:4;	//0:3 
.................... 	int void54:2; //4:5 
.................... 	int1 rtr; //6 //transmission frame remote tranmission 
.................... 	int1 void7; //7 
.................... }; 
.................... struct txbNdlc_struct TXB0DLC; 
.................... struct txbNdlc_struct TXB1DLC; 
.................... struct txbNdlc_struct TXB2DLC; 
.................... struct txbNdlc_struct TXBaDLC; 
.................... #byte TXB0DLC=0xF45 
.................... #byte TXB1DLC=0xF35 
.................... #byte TXB2DLC=0xF25 
.................... #byte TXBaDLC=0xF65  //txbXdlc when in the access bank 
....................  
....................  
.................... //transmit error count register 
.................... #byte TXERRCNT=0xF76 
....................  
....................  
.................... enum CAN_RX_MODE {CAN_RX_ALL=3, CAN_RX_EXT=2, CAN_RX_STD=1, CAN_RX_VALID=0}; 
....................  
.................... //receive buffer 0 control register 
.................... struct { 
.................... 	int1 filthit0;	//0 //filter hit 
.................... 	int1 jtoff;	//1 //jump table offset 
.................... 	int1 rxb0dben;	//2 //receive buffer 0 double buffer enable 
.................... 	int1 rxrtrro;	//3 //receive remote transfer request 
.................... 	int1 void4;	//4 
.................... 	CAN_RX_MODE rxm:2;	//5:6 //receiver buffer mode 
.................... 	int1 rxful;	//7 //receive full status 
.................... } RXB0CON; 
.................... #byte RXB0CON=0xF60 
....................  
.................... //receive buffer 1 control register 
.................... struct { 
.................... 	int filthit:3;	//0:2 
.................... 	int1 rxrtrro;	//3 //receive remote transfer request 
.................... 	int1 void4;	//4 
.................... 	CAN_RX_MODE rxm:2;	//5:6 //receive buffer mode 
.................... 	int1 rxful;	//7	//receive full 
.................... } RXB1CON; 
.................... #byte	RXB1CON=0xF50 
....................  
....................  
.................... //receive buffer n standard identifier 
.................... #byte	RXB0SIDH=0xF61 
.................... #byte	RXB0SIDL=0xF62 
.................... #byte	RXB1SIDH=0xF51 
.................... #byte	RXB1SIDL=0xF52 
....................  
.................... //receive buffer n extended identifier 
.................... #byte	RXB0EIDH=0xF63 
.................... #byte	RXB0EIDL=0xF64 
.................... #byte	RXB1EIDH=0xF53 
.................... #byte	RXB1EIDL=0xF54 
....................  
.................... #byte TXRXBaEIDL=0xF64 
....................  
.................... struct { 
....................    int void012:3; //0:3 
....................    int1 ext;   //extendid id 
....................    int1 srr;   //substitute remove request bit 
....................    int void567:3; //5:7 
.................... } TXRXBaSIDL; 
.................... #byte TXRXBaSIDL=0xF62 
....................  
.................... //receive buffer n data length code register 
.................... struct rxbNdlc_struct { 
.................... 	int dlc:4;	//0:3 //data length code 
.................... 	int1 rb0; //4 //reserved 
.................... 	int1 rb1;	//5 //reserved 
.................... 	int1 rtr;	//6 //receiver remote transmission request bit 
.................... 	int1 void7;	//7 
.................... }; 
.................... struct rxbNdlc_struct RXB0DLC; 
.................... struct rxbNdlc_struct RXB1DLC; 
.................... struct rxbNdlc_struct RXBaDLC; 
.................... #byte	RXB0DLC=0xF65 
.................... #byte	RXB1DLC=0xF55 
.................... #byte	RXBaDLC=0xF65 
....................  
.................... //receive buffer n data field byte m register 
.................... #byte RXB0D0=0xF66 
.................... #byte RXB0D7=0xF6D 
.................... #byte TXRXBaD0=0xF66 
.................... #byte TXRXBaD7=0xF6D 
....................  
.................... //receive error count 
.................... #byte RXERRCNT=0xF75 
....................  
.................... //receive acceptance filter n standard indifier 
.................... #byte RXF0SIDH=0xF00 
.................... #byte RXF0SIDL=0xF01 
.................... #byte RXF1SIDH=0xF04 
.................... #byte RXF1SIDL=0xF05 
.................... #byte RXF2SIDH=0xF08 
.................... #byte RXF2SIDL=0xF09 
.................... #byte RXF3SIDH=0xF0C 
.................... #byte RXF3SIDL=0xF0D 
.................... #byte RXF4SIDH=0xF10 
.................... #byte RXF4SIDL=0xF11 
.................... #byte RXF5SIDH=0xF14 
.................... #byte RXF5SIDL=0xF15 
....................  
.................... //receive acceptance filter n extended indifier 
.................... #byte RXF0EIDH=0xF02 
.................... #byte RXF0EIDL=0xF03 
.................... #byte RXF1EIDH=0xF06 
.................... #byte RXF1EIDL=0xF07 
.................... #byte RXF2EIDH=0xF0A 
.................... #byte RXF2EIDL=0xF0B 
.................... #byte RXF3EIDH=0xF0E 
.................... #byte RXF3EIDL=0xF0F 
.................... #byte RXF4EIDH=0xF12 
.................... #byte RXF4EIDL=0xF13 
.................... #byte RXF5EIDH=0xF16 
.................... #byte RXF5EIDL=0xF17 
....................  
.................... //receive acceptance mask n standard identifer mask 
.................... #byte RXM0SIDH=0xF18 
.................... #byte RXM0SIDL=0xF19 
.................... #byte RXM1SIDH=0xF1C 
.................... #byte RXM1SIDL=0xF1D 
....................  
.................... //receive acceptance mask n extended identifer mask 
.................... #byte RXM0EIDH=0xF1A 
.................... #byte RXM0EIDL=0xF1B 
.................... #byte RXM1EIDH=0xF1E 
.................... #byte RXM1EIDL=0xF1F 
....................  
.................... //value to put in mask field to accept all incoming id's 
.................... #define CAN_MASK_ACCEPT_ALL   0 
....................  
.................... //can interrupt flags 
.................... #bit CAN_INT_IRXIF = 0xFA4.7 
.................... #bit CAN_INT_WAKIF = 0xFA4.6 
.................... #bit CAN_INT_ERRIF = 0xFA4.5 
.................... #bit CAN_INT_TXB2IF = 0xFA4.4 
.................... #bit CAN_INT_TXB1IF = 0xFA4.3 
.................... #bit CAN_INT_TXB0IF = 0xFA4.2 
.................... #bit CAN_INT_RXB1IF = 0xFA4.1 
.................... #bit CAN_INT_RXB0IF = 0xFA4.0 
....................  
.................... //PROTOTYPES 
....................  
.................... struct rx_stat { 
....................    int1 err_ovfl; 
....................    int filthit:3; 
....................    int1 buffer; 
....................    int1 rtr; 
....................    int1 ext; 
....................    int1 inv; 
.................... }; 
....................  
.................... void  can_init(void); 
.................... void  can_set_baud(void); 
.................... void  can_set_mode(CAN_OP_MODE mode); 
.................... void  can_set_id(int* addr, int32 id, int1 ext); 
.................... int32 can_get_id(int * addr, int1 ext); 
.................... int   can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr); 
.................... int1  can_getd(int32 & id, int * data, int & len, struct rx_stat & stat); 
....................  
.................... #endif 
....................  
....................  
.................... #if CAN_DO_DEBUG 
....................  #define can_debug printf 
.................... #else 
....................  #define can_debug 
.................... #endif 
....................  
....................  
.................... //macros 
.................... #define can_kbhit()                 (RXB0CON.rxful || RXB1CON.rxful) 
.................... #define can_tbe()                   (!TXB0CON.txreq || !TXB1CON.txreq || !TXB2CON.txreq) 
.................... #define can_abort()                 (CANCON.abat=1) 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_init() 
.................... // 
.................... // Initializes PIC18xxx8 CAN peripheral.  Sets the RX filter and masks so the 
.................... // CAN peripheral will receive all incoming IDs.  Configures both RX buffers 
.................... // to only accept valid valid messages (as opposed to all messages, or all 
.................... // extended message, or all standard messages).  Also sets the tri-state 
.................... // setting of B2 to output, and B3 to input (apparently the CAN peripheral 
.................... // doesn't keep track of this) 
.................... // 
.................... // The constants (CAN_USE_RX_DOUBLE_BUFFER, CAN_ENABLE_DRIVE_HIGH, 
.................... // CAN_ENABLE_CAN_CAPTURE) are given a default define in the can-18xxx8.h file. 
.................... // These default values can be overwritten in the main code, but most 
.................... // applications will be fine with these defaults. 
.................... // 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... void can_init(void) { 
....................    can_set_mode(CAN_OP_CONFIG);   //must be in config mode before params can be set 
*
022E:  MOVLW  04
0230:  MOVWF  1B
0232:  RCALL  00AE
....................    can_set_baud(); 
0234:  RCALL  00D0
....................  
....................    RXB0CON=0; 
0236:  CLRF   F60
....................    RXB0CON.rxm=CAN_RX_VALID; 
0238:  MOVLW  9F
023A:  ANDWF  F60,W
023C:  MOVWF  F60
....................    RXB0CON.rxb0dben=CAN_USE_RX_DOUBLE_BUFFER; 
023E:  BSF    F60.2
....................    RXB1CON=RXB0CON; 
0240:  MOVFF  F60,F50
....................  
....................    CIOCON.endrhi=CAN_ENABLE_DRIVE_HIGH; 
0244:  BCF    F73.5
....................    CIOCON.cancap=CAN_ENABLE_CAN_CAPTURE; 
0246:  BCF    F73.4
....................  
....................    can_set_id(RX0MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 0 
0248:  MOVLW  0F
024A:  MOVWF  1C
024C:  MOVLW  1B
024E:  MOVWF  1B
0250:  CLRF   20
0252:  CLRF   1F
0254:  CLRF   1E
0256:  CLRF   1D
0258:  MOVLW  01
025A:  MOVWF  21
025C:  RCALL  00FE
....................    can_set_id(RX0FILTER0, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 0 
025E:  MOVLW  0F
0260:  MOVWF  1C
0262:  MOVLW  03
0264:  MOVWF  1B
0266:  CLRF   20
0268:  CLRF   1F
026A:  CLRF   1E
026C:  CLRF   1D
026E:  MOVLW  01
0270:  MOVWF  21
0272:  RCALL  00FE
....................    can_set_id(RX0FILTER1, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 0 
0274:  MOVLW  0F
0276:  MOVWF  1C
0278:  MOVLW  07
027A:  MOVWF  1B
027C:  CLRF   20
027E:  CLRF   1F
0280:  CLRF   1E
0282:  CLRF   1D
0284:  MOVLW  01
0286:  MOVWF  21
0288:  RCALL  00FE
....................  
....................    can_set_id(RX1MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 1 
028A:  MOVLW  0F
028C:  MOVWF  1C
028E:  MOVLW  1F
0290:  MOVWF  1B
0292:  CLRF   20
0294:  CLRF   1F
0296:  CLRF   1E
0298:  CLRF   1D
029A:  MOVLW  01
029C:  MOVWF  21
029E:  RCALL  00FE
....................    can_set_id(RX1FILTER2, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 1 
02A0:  MOVLW  0F
02A2:  MOVWF  1C
02A4:  MOVLW  0B
02A6:  MOVWF  1B
02A8:  CLRF   20
02AA:  CLRF   1F
02AC:  CLRF   1E
02AE:  CLRF   1D
02B0:  MOVLW  01
02B2:  MOVWF  21
02B4:  RCALL  00FE
....................    can_set_id(RX1FILTER3, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 1 
02B6:  MOVLW  0F
02B8:  MOVWF  1C
02BA:  MOVWF  1B
02BC:  CLRF   20
02BE:  CLRF   1F
02C0:  CLRF   1E
02C2:  CLRF   1D
02C4:  MOVLW  01
02C6:  MOVWF  21
02C8:  RCALL  00FE
....................    can_set_id(RX1FILTER4, 0, CAN_USE_EXTENDED_ID);  //set filter 2 of mask 1 
02CA:  MOVLW  0F
02CC:  MOVWF  1C
02CE:  MOVLW  13
02D0:  MOVWF  1B
02D2:  CLRF   20
02D4:  CLRF   1F
02D6:  CLRF   1E
02D8:  CLRF   1D
02DA:  MOVLW  01
02DC:  MOVWF  21
02DE:  RCALL  00FE
....................    can_set_id(RX1FILTER5, 0, CAN_USE_EXTENDED_ID);  //set filter 3 of mask 1 
02E0:  MOVLW  0F
02E2:  MOVWF  1C
02E4:  MOVLW  17
02E6:  MOVWF  1B
02E8:  CLRF   20
02EA:  CLRF   1F
02EC:  CLRF   1E
02EE:  CLRF   1D
02F0:  MOVLW  01
02F2:  MOVWF  21
02F4:  RCALL  00FE
....................  
....................    set_tris_b((*0xF93 & 0xFB ) | 0x08);   //b3 is out, b2 is in 
02F6:  MOVF   F93,W
02F8:  ANDLW  FB
02FA:  IORLW  08
02FC:  MOVWF  F93
....................  
....................    can_set_mode(CAN_OP_NORMAL); 
02FE:  CLRF   1B
0300:  RCALL  00AE
.................... } 
0302:  GOTO   0520 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_baud() 
.................... // 
.................... // Configures the baud rate control registers.  All the defines here 
.................... // are defaulted in the can-18xxx8.h file.  These defaults can, and 
.................... // probably should, be overwritten in the main code. 
.................... // 
.................... // Current defaults are set to work with Microchip's MCP250xxx CAN 
.................... // Developers Kit if this PIC is running at 20Mhz. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_baud(void) { 
....................    BRGCON1.brp=CAN_BRG_PRESCALAR; 
*
00D0:  MOVLW  C0
00D2:  ANDWF  F70,W
00D4:  IORLW  04
00D6:  MOVWF  F70
....................    BRGCON1.sjw=CAN_BRG_SYNCH_JUMP_WIDTH; 
00D8:  MOVLW  3F
00DA:  ANDWF  F70,W
00DC:  MOVWF  F70
....................  
....................    BRGCON2.prseg=CAN_BRG_PROPAGATION_TIME; 
00DE:  MOVLW  F8
00E0:  ANDWF  F71,W
00E2:  IORLW  02
00E4:  MOVWF  F71
....................    BRGCON2.seg1ph=CAN_BRG_PHASE_SEGMENT_1; 
00E6:  MOVLW  C7
00E8:  ANDWF  F71,W
00EA:  IORLW  28
00EC:  MOVWF  F71
....................    BRGCON2.sam=CAN_BRG_SAM; 
00EE:  BCF    F71.6
....................    BRGCON2.seg2phts=CAN_BRG_SEG_2_PHASE_TS; 
00F0:  BSF    F71.7
....................  
....................    BRGCON3.seg2ph=CAN_BRG_PHASE_SEGMENT_2; 
00F2:  MOVLW  F8
00F4:  ANDWF  F72,W
00F6:  IORLW  05
00F8:  MOVWF  F72
....................    BRGCON3.wakfil=CAN_BRG_WAKE_FILTER; 
00FA:  BCF    F72.6
.................... } 
00FC:  RETLW  00
....................  
.................... void can_set_mode(CAN_OP_MODE mode) { 
....................    CANCON.reqop=mode; 
*
00AE:  SWAPF  1B,W
00B0:  ANDLW  70
00B2:  MOVWF  00
00B4:  BCF    FD8.0
00B6:  RLCF   00,F
00B8:  MOVLW  1F
00BA:  ANDWF  F6F,W
00BC:  IORWF  00,W
00BE:  MOVWF  F6F
....................    while( (CANSTAT.opmode) != mode ); 
00C0:  MOVFF  F6E,00
00C4:  SWAPF  00,F
00C6:  RRCF   00,W
00C8:  ANDLW  07
00CA:  SUBWF  1B,W
00CC:  BNZ   00C0
.................... } 
00CE:  RETLW  00
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_id() 
.................... // 
.................... // Configures the xxxxEIDL, xxxxEIDH, xxxxSIDL and xxxxSIDH registers to 
.................... // configure the defined buffer to use the specified ID 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     id - ID to set buffer to 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_id(int* addr, int32 id, int1 ext) { 
....................    int *ptr; 
....................  
....................    ptr=addr; 
*
00FE:  MOVFF  1C,23
0102:  MOVFF  1B,22
....................  
....................    if (ext) {  //extended 
0106:  MOVF   21,F
0108:  BZ    01AE
....................       //eidl 
....................       *ptr=make8(id,0); //0:7 
010A:  MOVFF  22,FE9
010E:  MOVFF  23,FEA
0112:  MOVFF  1D,FEF
....................  
....................       //eidh 
....................       ptr--; 
0116:  MOVF   22,W
0118:  BTFSC  FD8.2
011A:  DECF   23,F
011C:  DECF   22,F
....................       *ptr=make8(id,1); //8:15 
011E:  MOVFF  22,FE9
0122:  MOVFF  23,FEA
0126:  MOVFF  1E,FEF
....................  
....................       //sidl 
....................       ptr--; 
012A:  MOVF   22,W
012C:  BTFSC  FD8.2
012E:  DECF   23,F
0130:  DECF   22,F
....................       *ptr=make8(id,2) & 0x03;   //16:17 
0132:  MOVFF  22,FE9
0136:  MOVFF  23,FEA
013A:  MOVF   1F,W
013C:  ANDLW  03
013E:  MOVWF  FEF
....................       *ptr|=(make8(id,2) << 3) & 0xE0; //18:20 
0140:  MOVFF  22,FE9
0144:  MOVFF  23,FEA
0148:  MOVFF  1F,00
014C:  RLCF   00,F
014E:  RLCF   00,F
0150:  RLCF   00,F
0152:  MOVLW  F8
0154:  ANDWF  00,F
0156:  MOVF   00,W
0158:  ANDLW  E0
015A:  IORWF  FEF,W
015C:  MOVWF  FEF
....................       *ptr|=0x08; 
015E:  MOVFF  22,FE9
0162:  MOVFF  23,FEA
0166:  MOVF   FEF,W
0168:  IORLW  08
016A:  MOVWF  FEF
....................  
....................  
....................       //sidh 
....................       ptr--; 
016C:  MOVF   22,W
016E:  BTFSC  FD8.2
0170:  DECF   23,F
0172:  DECF   22,F
....................       *ptr=((make8(id,2) >> 5) & 0x07 ); //21:23 
0174:  MOVFF  22,FE9
0178:  MOVFF  23,FEA
017C:  MOVFF  1F,00
0180:  SWAPF  00,F
0182:  RRCF   00,F
0184:  MOVLW  07
0186:  ANDWF  00,F
0188:  MOVF   00,W
018A:  ANDLW  07
018C:  MOVWF  FEF
....................       *ptr|=((make8(id,3) << 3) & 0xF8);//24:28 
018E:  MOVFF  22,FE9
0192:  MOVFF  23,FEA
0196:  MOVFF  20,00
019A:  RLCF   00,F
019C:  RLCF   00,F
019E:  RLCF   00,F
01A0:  MOVLW  F8
01A2:  ANDWF  00,F
01A4:  MOVF   00,W
01A6:  ANDLW  F8
01A8:  IORWF  FEF,W
01AA:  MOVWF  FEF
....................    } 
....................    else {   //standard 
01AC:  BRA    022C
....................       //eidl 
....................       *ptr=0; 
01AE:  MOVFF  22,FE9
01B2:  MOVFF  23,FEA
01B6:  CLRF   FEF
....................  
....................       //eidh 
....................       ptr--; 
01B8:  MOVF   22,W
01BA:  BTFSC  FD8.2
01BC:  DECF   23,F
01BE:  DECF   22,F
....................       *ptr=0; 
01C0:  MOVFF  22,FE9
01C4:  MOVFF  23,FEA
01C8:  CLRF   FEF
....................  
....................       //sidl 
....................       ptr--; 
01CA:  MOVF   22,W
01CC:  BTFSC  FD8.2
01CE:  DECF   23,F
01D0:  DECF   22,F
....................       *ptr=(make8(id,0) << 5) & 0xE0; 
01D2:  MOVFF  22,FE9
01D6:  MOVFF  23,FEA
01DA:  MOVFF  1D,00
01DE:  SWAPF  00,F
01E0:  RLCF   00,F
01E2:  MOVLW  E0
01E4:  ANDWF  00,F
01E6:  MOVF   00,W
01E8:  ANDLW  E0
01EA:  MOVWF  FEF
....................  
....................       //sidh 
....................       ptr--; 
01EC:  MOVF   22,W
01EE:  BTFSC  FD8.2
01F0:  DECF   23,F
01F2:  DECF   22,F
....................       *ptr=(make8(id,0) >> 3) & 0x1F; 
01F4:  MOVFF  22,FE9
01F8:  MOVFF  23,FEA
01FC:  MOVFF  1D,00
0200:  RRCF   00,F
0202:  RRCF   00,F
0204:  RRCF   00,F
0206:  MOVLW  1F
0208:  ANDWF  00,F
020A:  MOVF   00,W
020C:  ANDLW  1F
020E:  MOVWF  FEF
....................       *ptr|=(make8(id,1) << 5) & 0xE0; 
0210:  MOVFF  22,FE9
0214:  MOVFF  23,FEA
0218:  MOVFF  1E,00
021C:  SWAPF  00,F
021E:  RLCF   00,F
0220:  MOVLW  E0
0222:  ANDWF  00,F
0224:  MOVF   00,W
0226:  ANDLW  E0
0228:  IORWF  FEF,W
022A:  MOVWF  FEF
....................    } 
.................... } 
022C:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_get_id() 
.................... // 
.................... // Returns the ID of the specified buffer.  (The opposite of can_set_id()) 
.................... // This is used after receiving a message, to see which ID sent the message. 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //   Returns: 
.................... //     The ID of the buffer 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int32 can_get_id(int * addr, int1 ext) { 
....................    int32 ret; 
....................    int * ptr; 
....................  
....................    ret=0; 
*
0306:  CLRF   3B
0308:  CLRF   3A
030A:  CLRF   39
030C:  CLRF   38
....................    ptr=addr; 
030E:  MOVFF  36,3D
0312:  MOVFF  35,3C
....................  
....................    if (ext) { 
0316:  MOVF   37,F
0318:  BTFSC  FD8.2
031A:  BRA    0432
....................       ret=*ptr;  //eidl 
031C:  MOVFF  3D,03
0320:  MOVFF  3C,FE9
0324:  MOVFF  3D,FEA
0328:  MOVFF  FEF,00
032C:  CLRF   01
032E:  CLRF   02
0330:  CLRF   03
0332:  MOVFF  03,3B
0336:  MOVFF  02,3A
033A:  MOVFF  01,39
033E:  MOVFF  00,38
....................  
....................       ptr--;     //eidh 
0342:  MOVF   3C,W
0344:  BTFSC  FD8.2
0346:  DECF   3D,F
0348:  DECF   3C,F
....................       ret|=((int32)*ptr << 8); 
034A:  MOVFF  3C,FE9
034E:  MOVFF  3D,FEA
0352:  MOVF   FEF,W
0354:  CLRF   40
0356:  CLRF   3F
0358:  MOVWF  3E
035A:  CLRF   00
035C:  MOVF   00,W
035E:  IORWF  38,F
0360:  MOVF   3E,W
0362:  IORWF  39,F
0364:  MOVF   3F,W
0366:  IORWF  3A,F
0368:  MOVF   40,W
036A:  IORWF  3B,F
....................  
....................       ptr--;     //sidl 
036C:  MOVF   3C,W
036E:  BTFSC  FD8.2
0370:  DECF   3D,F
0372:  DECF   3C,F
....................       ret|=((int32)*ptr & 0x03) << 16; 
0374:  MOVFF  3C,FE9
0378:  MOVFF  3D,FEA
037C:  MOVF   FEF,W
037E:  ANDLW  03
0380:  MOVWF  42
0382:  CLRF   43
0384:  CLRF   44
0386:  CLRF   45
0388:  CLRF   00
038A:  CLRF   01
038C:  MOVF   00,W
038E:  IORWF  38,F
0390:  MOVF   01,W
0392:  IORWF  39,F
0394:  MOVF   42,W
0396:  IORWF  3A,F
0398:  MOVF   43,W
039A:  IORWF  3B,F
....................       ret|=((int32)*ptr & 0xE0) << 13; 
039C:  MOVFF  3C,FE9
03A0:  MOVFF  3D,FEA
03A4:  MOVF   FEF,W
03A6:  ANDLW  E0
03A8:  MOVWF  42
03AA:  CLRF   43
03AC:  CLRF   44
03AE:  CLRF   45
03B0:  CLRF   00
03B2:  RLCF   42,W
03B4:  MOVWF  01
03B6:  RLCF   43,W
03B8:  MOVWF  02
03BA:  RLCF   44,W
03BC:  MOVWF  03
03BE:  RLCF   01,F
03C0:  RLCF   02,F
03C2:  RLCF   03,F
03C4:  RLCF   01,F
03C6:  RLCF   02,F
03C8:  RLCF   03,F
03CA:  RLCF   01,F
03CC:  RLCF   02,F
03CE:  RLCF   03,F
03D0:  RLCF   01,F
03D2:  RLCF   02,F
03D4:  RLCF   03,F
03D6:  MOVLW  E0
03D8:  ANDWF  01,F
03DA:  MOVF   00,W
03DC:  IORWF  38,F
03DE:  MOVF   01,W
03E0:  IORWF  39,F
03E2:  MOVF   02,W
03E4:  IORWF  3A,F
03E6:  MOVF   03,W
03E8:  IORWF  3B,F
....................  
....................       ptr--;     //sidh 
03EA:  MOVF   3C,W
03EC:  BTFSC  FD8.2
03EE:  DECF   3D,F
03F0:  DECF   3C,F
....................       ret|=((int32)*ptr << 21); 
03F2:  MOVFF  3C,FE9
03F6:  MOVFF  3D,FEA
03FA:  MOVF   FEF,W
03FC:  CLRF   3F
03FE:  MOVWF  3E
0400:  CLRF   00
0402:  CLRF   01
0404:  RLCF   3E,W
0406:  MOVWF  02
0408:  RLCF   3F,W
040A:  MOVWF  03
040C:  RLCF   02,F
040E:  RLCF   03,F
0410:  RLCF   02,F
0412:  RLCF   03,F
0414:  RLCF   02,F
0416:  RLCF   03,F
0418:  RLCF   02,F
041A:  RLCF   03,F
041C:  MOVLW  E0
041E:  ANDWF  02,F
0420:  MOVF   00,W
0422:  IORWF  38,F
0424:  MOVF   01,W
0426:  IORWF  39,F
0428:  MOVF   02,W
042A:  IORWF  3A,F
042C:  MOVF   03,W
042E:  IORWF  3B,F
....................  
....................    } 
....................    else { 
0430:  BRA    04D0
....................       ptr-=2;    //sidl 
0432:  MOVLW  02
0434:  SUBWF  3C,F
0436:  MOVLW  00
0438:  SUBWFB 3D,F
....................       ret=((int32)*ptr & 0xE0) >> 5; 
043A:  MOVFF  3C,FE9
043E:  MOVFF  3D,FEA
0442:  MOVF   FEF,W
0444:  ANDLW  E0
0446:  MOVWF  42
0448:  CLRF   43
044A:  CLRF   44
044C:  CLRF   45
044E:  RRCF   45,W
0450:  MOVWF  3B
0452:  RRCF   44,W
0454:  MOVWF  3A
0456:  RRCF   43,W
0458:  MOVWF  39
045A:  RRCF   42,W
045C:  MOVWF  38
045E:  RRCF   3B,F
0460:  RRCF   3A,F
0462:  RRCF   39,F
0464:  RRCF   38,F
0466:  RRCF   3B,F
0468:  RRCF   3A,F
046A:  RRCF   39,F
046C:  RRCF   38,F
046E:  RRCF   3B,F
0470:  RRCF   3A,F
0472:  RRCF   39,F
0474:  RRCF   38,F
0476:  RRCF   3B,F
0478:  RRCF   3A,F
047A:  RRCF   39,F
047C:  RRCF   38,F
047E:  MOVLW  07
0480:  ANDWF  3B,F
....................  
....................       ptr--;     //sidh 
0482:  MOVF   3C,W
0484:  BTFSC  FD8.2
0486:  DECF   3D,F
0488:  DECF   3C,F
....................       ret|=((int32)*ptr << 3); 
048A:  MOVFF  3C,FE9
048E:  MOVFF  3D,FEA
0492:  MOVF   FEF,W
0494:  CLRF   41
0496:  CLRF   40
0498:  CLRF   3F
049A:  MOVWF  3E
049C:  RLCF   3E,W
049E:  MOVWF  00
04A0:  RLCF   3F,W
04A2:  MOVWF  01
04A4:  RLCF   40,W
04A6:  MOVWF  02
04A8:  RLCF   41,W
04AA:  MOVWF  03
04AC:  RLCF   00,F
04AE:  RLCF   01,F
04B0:  RLCF   02,F
04B2:  RLCF   03,F
04B4:  RLCF   00,F
04B6:  RLCF   01,F
04B8:  RLCF   02,F
04BA:  RLCF   03,F
04BC:  MOVLW  F8
04BE:  ANDWF  00,F
04C0:  MOVF   00,W
04C2:  IORWF  38,F
04C4:  MOVF   01,W
04C6:  IORWF  39,F
04C8:  MOVF   02,W
04CA:  IORWF  3A,F
04CC:  MOVF   03,W
04CE:  IORWF  3B,F
....................    } 
....................  
....................    return(ret); 
04D0:  MOVFF  38,00
04D4:  MOVFF  39,01
04D8:  MOVFF  3A,02
04DC:  MOVFF  3B,03
.................... } 
04E0:  GOTO   0634 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_putd() 
.................... // 
.................... // Puts data on a transmit buffer, at which time the CAN peripheral will 
.................... // send when the CAN bus becomes available. 
.................... // 
.................... //    Paramaters: 
.................... //       id - ID to transmit data as 
.................... //       data - pointer to data to send 
.................... //       len - length of data to send 
.................... //       priority - priority of message.  The higher the number, the 
.................... //                  sooner the CAN peripheral will send the message. 
.................... //                  Numbers 0 through 3 are valid. 
.................... //       ext - TRUE to use an extended ID, FALSE if not 
.................... //       rtr - TRUE to set the RTR (request) bit in the ID, false if NOT 
.................... // 
.................... //    Returns: 
.................... //       If successful, it will return TRUE 
.................... //       If un-successful, will return FALSE 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr) { 
....................    int i; 
....................    int * txd0; 
....................    int port; 
....................  
....................    txd0=&TXRXBaD0; 
....................  
....................     // find emtpy transmitter 
....................     //map access bank addresses to empty transmitter 
....................    if (!TXB0CON.txreq) { 
....................       CANCON.win=CAN_WIN_TX0; 
....................       port=0; 
....................    } 
....................    else if (!TXB1CON.txreq) { 
....................       CANCON.win=CAN_WIN_TX1; 
....................       port=1; 
....................    } 
....................    else if (!TXB2CON.txreq) { 
....................       CANCON.win=CAN_WIN_TX2; 
....................       port=2; 
....................    } 
....................    else { 
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nCAN_PUTD() FAIL: NO OPEN TX BUFFERS\r\n"); 
....................       #endif 
....................       return(0); 
....................    } 
....................  
....................    //set priority. 
....................    TXBaCON.txpri=priority; 
....................  
....................    //set tx mask 
....................    can_set_id(TXRXBaID, id, ext); 
....................  
....................    //set tx data count 
....................    TXBaDLC=len; 
....................    TXBaDLC.rtr=rtr; 
....................  
....................     for (i=0; i<len; i++) { 
....................       *txd0=*data; 
....................       txd0++; 
....................       data++; 
....................     } 
....................  
....................    //enable transmission 
....................    TXBaCON.txreq=1; 
....................  
....................    CANCON.win=CAN_WIN_RX0; 
....................  
....................    #if CAN_DO_DEBUG 
....................             can_debug("\r\nCAN_PUTD(): BUFF=%U ID=%LX LEN=%U PRI=%U EXT=%U RTR=%U\r\n", port, id, len, priority, ext, rtr); 
....................             if ((len)&&(!rtr)) { 
....................                data-=len; 
....................                can_debug("  DATA = "); 
....................                for (i=0;i<len;i++) { 
....................                   can_debug("%X ",*data); 
....................                   data++; 
....................                } 
....................                can_debug("\r\n"); 
....................             } 
....................    #endif 
....................  
....................    return(1); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_getd() 
.................... // 
.................... // Gets data from a receive buffer, if the data exists 
.................... // 
.................... //    Returns: 
.................... //      id - ID who sent message 
.................... //      data - pointer to array of data 
.................... //      len - length of received data 
.................... //      stat - structure holding some information (such as which buffer 
.................... //             recieved it, ext or standard, etc) 
.................... // 
.................... //    Returns: 
.................... //      Function call returns a TRUE if there was data in a RX buffer, FALSE 
.................... //      if there was none. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_getd(int32 & id, int * data, int & len, struct rx_stat & stat) 
.................... { 
....................     int i; 
....................     int * ptr; 
....................  
....................     if (RXB0CON.rxful) { 
*
05A2:  BTFSS  F60.7
05A4:  BRA    05D4
....................         CANCON.win=CAN_WIN_RX0; 
05A6:  MOVLW  F1
05A8:  ANDWF  F6F,W
05AA:  MOVWF  F6F
....................         stat.buffer=0; 
05AC:  BCF    1B.4
....................  
....................         CAN_INT_RXB0IF=0; 
05AE:  BCF    FA4.0
....................  
....................         stat.err_ovfl=COMSTAT.rx0ovfl; 
05B0:  BCF    1B.0
05B2:  BTFSC  F74.7
05B4:  BSF    1B.0
....................         COMSTAT.rx0ovfl=0; 
05B6:  BCF    F74.7
....................  
....................         if (RXB0CON.rxb0dben) { 
05B8:  BTFSS  F60.2
05BA:  BRA    05D2
....................          stat.filthit=RXB0CON.filthit0; 
05BC:  MOVLW  00
05BE:  BTFSC  F60.0
05C0:  MOVLW  01
05C2:  ANDLW  07
05C4:  MOVWF  00
05C6:  BCF    FD8.0
05C8:  RLCF   00,F
05CA:  MOVLW  F1
05CC:  ANDWF  1B,W
05CE:  IORWF  00,W
05D0:  MOVWF  1B
....................         } 
....................     } 
....................     else if ( RXB1CON.rxful ) 
05D2:  BRA    060C
05D4:  MOVLB  F
05D6:  BTFSS  x50.7
05D8:  BRA    0604
....................     { 
....................         CANCON.win=CAN_WIN_RX1; 
05DA:  MOVLW  F1
05DC:  ANDWF  F6F,W
05DE:  IORLW  0A
05E0:  MOVWF  F6F
....................         stat.buffer=1; 
05E2:  BSF    1B.4
....................  
....................         CAN_INT_RXB1IF=0; 
05E4:  BCF    FA4.1
....................  
....................         stat.err_ovfl=COMSTAT.rx1ovfl; 
05E6:  BCF    1B.0
05E8:  BTFSC  F74.6
05EA:  BSF    1B.0
....................         COMSTAT.rx1ovfl=0; 
05EC:  BCF    F74.6
....................  
....................         stat.filthit=RXB1CON.filthit; 
05EE:  MOVF   x50,W
05F0:  ANDLW  07
05F2:  ANDLW  07
05F4:  MOVWF  00
05F6:  BCF    FD8.0
05F8:  RLCF   00,F
05FA:  MOVLW  F1
05FC:  ANDWF  1B,W
05FE:  IORWF  00,W
0600:  MOVWF  1B
....................     } 
....................     else { 
0602:  BRA    060A
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nFAIL ON CAN_GETD(): NO MESSAGE IN BUFFER\r\n"); 
....................       #endif 
....................       return (0); 
0604:  MOVLW  00
0606:  MOVWF  01
0608:  BRA    069E
060A:  MOVLB  0
....................     } 
....................  
....................     len = RXBaDLC.dlc; 
060C:  MOVF   F65,W
060E:  ANDLW  0F
0610:  MOVWF  28
....................     stat.rtr=RXBaDLC.rtr; 
0612:  BCF    1B.5
0614:  BTFSC  F65.6
0616:  BSF    1B.5
....................  
....................     stat.ext=TXRXBaSIDL.ext; 
0618:  BCF    1B.6
061A:  BTFSC  F62.3
061C:  BSF    1B.6
....................     id=can_get_id(TXRXBaID,stat.ext); 
061E:  MOVLW  00
0620:  BTFSC  1B.6
0622:  MOVLW  01
0624:  MOVWF  2E
0626:  MOVLW  0F
0628:  MOVWF  36
062A:  MOVLW  64
062C:  MOVWF  35
062E:  MOVFF  2E,37
0632:  BRA    0306
0634:  MOVFF  03,1F
0638:  MOVFF  02,1E
063C:  MOVFF  01,1D
0640:  MOVFF  00,1C
....................  
....................     ptr = &TXRXBaD0; 
0644:  MOVLW  0F
0646:  MOVWF  2D
0648:  MOVLW  66
064A:  MOVWF  2C
....................     for ( i = 0; i < len; i++ ) { 
064C:  CLRF   2B
064E:  MOVF   28,W
0650:  SUBWF  2B,W
0652:  BC    067C
....................         *data = *ptr; 
0654:  MOVFF  2C,FE9
0658:  MOVFF  2D,FEA
065C:  MOVFF  FEF,30
0660:  MOVFF  2A,FEA
0664:  MOVFF  29,FE9
0668:  MOVFF  30,FEF
....................         data++; 
066C:  INCF   29,F
066E:  BTFSC  FD8.2
0670:  INCF   2A,F
....................         ptr++; 
0672:  INCF   2C,F
0674:  BTFSC  FD8.2
0676:  INCF   2D,F
....................     } 
0678:  INCF   2B,F
067A:  BRA    064E
....................  
....................     // return to default addressing 
....................     CANCON.win=CAN_WIN_RX0; 
067C:  MOVLW  F1
067E:  ANDWF  F6F,W
0680:  MOVWF  F6F
....................  
....................     stat.inv=CAN_INT_IRXIF; 
0682:  BCF    1B.7
0684:  BTFSC  FA4.7
0686:  BSF    1B.7
....................     CAN_INT_IRXIF = 0; 
0688:  BCF    FA4.7
....................  
....................     if (stat.buffer) { 
068A:  BTFSS  1B.4
068C:  BRA    0696
....................       RXB1CON.rxful=0; 
068E:  MOVLB  F
0690:  BCF    x50.7
....................     } 
....................     else { 
0692:  BRA    069A
0694:  MOVLB  0
....................       RXB0CON.rxful=0; 
0696:  BCF    F60.7
0698:  MOVLB  F
....................     } 
....................  
....................     #if CAN_DO_DEBUG 
....................        can_debug("\r\nCAN_GETD(): BUFF=%U ID=%LX LEN=%U OVF=%U ", stat.buffer, id, len, stat.err_ovfl); 
....................        can_debug("FILT=%U RTR=%U EXT=%U INV=%U", stat.filthit, stat.rtr, stat.ext, stat.inv); 
....................        if ((len)&&(!stat.rtr)) { 
....................           data-=len; 
....................           can_debug("\r\n    DATA = "); 
....................           for (i=0;i<len;i++) { 
....................             can_debug("%X ",*data); 
....................             data++; 
....................           } 
....................        } 
....................        can_debug("\r\n"); 
....................     #endif 
....................  
....................     return(1); 
069A:  MOVLW  01
069C:  MOVWF  01
.................... } 
....................  
....................  
....................  
....................  
.................... #include "CAN_id_v2.h" 
.................... //  CAN_id_v2 
.................... //  Version 2.0 - HDT - 20/04/2011 
.................... //  Version 2.1 - HDT - 22/04/2011 
....................  
.................... // Acknowledge IDs (0~99) 
....................  
.................... #define MAB_BRAKE_ACK_ID    0// acknowledge de frein (provient de la MicroAutoBox) 
.................... #define MAB_BOOST_ACK_ID    1// acknowledge de boost (provient de la MicroAutoBox) 
.................... #define MAB_ERRSC_ACK_ID    2// acknowledge d'erreurs supercapas (provient de la MicroAutoBox) 
.................... #define ARR_STOP_ACK_ID     3// acknowledge des feux stop (provient de la carte phares arrière) 
....................  
.................... // High Priority IDs (100~199) 
....................  
.................... #define TDB_BRAKE_ID        100// frein (provient du tableau de bord) 
.................... #define TDB_BOOST_ID        101// boost (provient du tableau de bord) 
.................... #define SCP_ERR_ID          102// erreurs de supercapas 
.................... #define MAB_STOP_ID         10_// feux stop (provient de la MicroAutoBox) 
....................  
.................... // Medium/low Priority IDs (200~infinity) 
....................  
.................... #define SCP_TEMP_ID         200// température supercapas 
.................... #define ALM_CHARGE_ID       201// charge de la batterie (provient de la carte alim) 
.................... #define TDB_PHARES_ID       202// phares (provient du tableau de bord) 
....................  
....................  
.................... #define FEUX_STOP       PIN_A0 
.................... #define FEUX_ARR        PIN_A1 
.................... #define CLIGN_ARG       PIN_A2 
.................... #define CLIGN_ARD       PIN_A3 
....................  
.................... #fuses HS,NOPROTECT,NOLVP,NOWDT 
.................... #use delay(clock=20000000) 
....................  
.................... // Variables utilisées 
....................  
.................... int1 feuxstop = false; 
.................... int1 feuxarr = false; 
.................... int1 clignd = false; 
.................... int1 cligng = false; 
....................  
.................... // si cligng == clignd == true -> mode warning 
....................  
.................... int1 clign_on = false; 
.................... int1 timer_active = false; 
....................  
.................... int16 ms = 0; 
....................  
.................... // Fonctions 
....................  
.................... #inline 
.................... void manageCAN(); 
....................  
.................... #inline 
.................... void internalLogic(); 
....................  
.................... #int_timer2 
.................... void isr_timer2() 
.................... { 
....................     if(timer_active)ms++; 
*
009E:  BTFSS  18.5
00A0:  BRA    00A8
00A2:  INCF   19,F
00A4:  BTFSC  FD8.2
00A6:  INCF   1A,F
.................... } 
....................  
00A8:  BCF    F9E.1
00AA:  GOTO   0058
.................... #org DEFAULT 
.................... void main() 
.................... { 
*
04E4:  CLRF   FF8
04E6:  BCF    FD0.7
04E8:  BSF    0D.7
04EA:  CLRF   FEA
04EC:  CLRF   FE9
04EE:  MOVF   FC1,W
04F0:  ANDLW  C0
04F2:  IORLW  0F
04F4:  MOVWF  FC1
04F6:  BCF    18.0
04F8:  BCF    18.1
04FA:  BCF    18.2
04FC:  BCF    18.3
04FE:  BCF    18.4
0500:  BCF    18.5
0502:  CLRF   19
0504:  CLRF   1A
....................    setup_adc_ports(NO_ANALOGS); 
0506:  MOVF   FC1,W
0508:  ANDLW  C0
050A:  IORLW  0F
050C:  MOVWF  FC1
....................  
....................    enable_interrupts(INT_TIMER2); 
050E:  BSF    F9D.1
....................    enable_interrupts(GLOBAL); 
0510:  MOVLW  C0
0512:  IORWF  FF2,F
....................  
....................    setup_timer_2(T2_DIV_BY_4,79,16);   //setup up timer2 to interrupt every 1ms 
0514:  MOVLW  78
0516:  IORLW  05
0518:  MOVWF  FCA
051A:  MOVLW  4F
051C:  MOVWF  FCB
....................    can_init(); 
051E:  BRA    022E
....................    can_set_baud(); 
0520:  RCALL  00D0
....................  
....................    //  BOUCLE DE TRAVAIL 
....................    while(TRUE) 
....................    { 
....................       internalLogic(); 
....................       manageCAN(); 
....................    } 
*
06CE:  MOVLB  0
06D0:  BRA    0522
.................... } 
....................  
.................... #inline 
.................... void manageCAN()        //cette carte ne fait qu'écouter le CAN, elle n'a aucune donnée à envoyer. 
06D2:  SLEEP 
.................... { 
....................    struct rx_stat rxStat; 
....................    int32 rxId; 
....................    int8 rxData[8]; 
....................    int8 rxLen; 
....................  
....................    if(can_kbhit())     // Une donnée est présente dans le buffer de réception du CAN 
*
0590:  BTFSC  F60.7
0592:  BRA    059C
0594:  MOVLB  F
0596:  BTFSS  x50.7
0598:  BRA    06CE
059A:  MOVLB  0
....................    { 
....................       if(can_getd(rxId,rxData,rxLen,rxStat)) 
059C:  CLRF   2A
059E:  MOVLW  20
05A0:  MOVWF  29
*
069E:  MOVF   01,F
06A0:  BZ    06CE
....................       { 
....................          switch(rxId)        // on veut modifier les feux arrière ? Utiliser rxData pour activer ou désactiver les feux. 
....................          { 
06A2:  MOVFF  1C,00
06A6:  MOVF   1D,W
06A8:  MOVWF  03
06AA:  BNZ   06B6
06AC:  MOVLW  CA
06AE:  SUBWF  00,W
06B0:  MOVLB  0
06B2:  BZ    06B8
06B4:  MOVLB  F
06B6:  BRA    06CE
....................             case TDB_PHARES_ID : 
....................                feuxarr = rxData[0]; 
06B8:  BCF    18.1
06BA:  BTFSC  20.0
06BC:  BSF    18.1
....................                cligng = rxData[2]; 
06BE:  BCF    18.3
06C0:  BTFSC  22.0
06C2:  BSF    18.3
....................                clignd = rxData[3]; 
06C4:  BCF    18.2
06C6:  BTFSC  23.0
06C8:  BSF    18.2
....................                break; 
06CA:  MOVLB  F
06CC:  BRA    06CE
....................              
....................             /*case MAB_STOP_ID : 
....................                feuxstop = rxData[0]; 
....................                if(can_tbe()) 
....................                { 
....................                   can_putd(ARR_STOP_ACK_ID,0,0,3,false,false); 
....................                } 
....................                break;*/ 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #inline 
.................... void internalLogic() 
.................... { 
....................    output_bit(FEUX_STOP, feuxstop);            // si feuxstop est à true, allumer les feux stop, et inversement 
*
0522:  BTFSC  18.0
0524:  BRA    052A
0526:  BCF    F89.0
0528:  BRA    052C
052A:  BSF    F89.0
052C:  BCF    F92.0
....................    output_bit(FEUX_ARR, feuxarr);              // si feuxarr est à true, allumer les feux arrière, et inversement 
052E:  BTFSC  18.1
0530:  BRA    0536
0532:  BCF    F89.1
0534:  BRA    0538
0536:  BSF    F89.1
0538:  BCF    F92.1
....................  
....................    timer_active = cligng|clignd; 
053A:  MOVLW  00
053C:  BTFSC  18.3
053E:  MOVLW  01
0540:  MOVWF  1B
0542:  MOVLW  00
0544:  BTFSC  18.2
0546:  MOVLW  01
0548:  IORWF  1B,W
054A:  BCF    18.5
054C:  BTFSC  FE8.0
054E:  BSF    18.5
....................    if(!timer_active)   ms = 0; 
0550:  BTFSC  18.5
0552:  BRA    0558
0554:  CLRF   1A
0556:  CLRF   19
....................  
....................    if(ms == 500)                               // 500 ms après l'activation du timer 
0558:  MOVF   19,W
055A:  SUBLW  F4
055C:  BNZ   0590
055E:  DECFSZ 1A,W
0560:  BRA    0590
....................    { 
....................       ms = 0;                                 // repartir pour 500 ms 
0562:  CLRF   1A
0564:  CLRF   19
....................       clign_on = !clign_on;                   // changer l'état d'allumage des clignotants 
0566:  BTFSS  18.4
0568:  BRA    056E
056A:  BCF    18.4
056C:  BRA    0570
056E:  BSF    18.4
....................  
....................       output_bit(CLIGN_ARD, clign_on && clignd); 
0570:  BTFSS  18.4
0572:  BRA    0578
0574:  BTFSC  18.2
0576:  BRA    057C
0578:  BCF    F89.3
057A:  BRA    057E
057C:  BSF    F89.3
057E:  BCF    F92.3
....................                                                 // allumer ou éteindre le cligno droit s'il est activé 
....................       output_bit(CLIGN_ARG, clign_on && cligng); 
0580:  BTFSS  18.4
0582:  BRA    0588
0584:  BTFSC  18.3
0586:  BRA    058C
0588:  BCF    F89.2
058A:  BRA    058E
058C:  BSF    F89.2
058E:  BCF    F92.2
....................                                                 // allumer ou éteindre le cligno gauche s'il est activé 
....................    } 
....................  
.................... } 
....................  

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN RESERVED
   Word  2: 1E1E   BROWNOUT NOWDT BORV21 PUT WDT32768
   Word  3: 8200   PBADEN NOLPT1OSC MCLR RESERVED
   Word  4: 0081   STVREN NODEBUG NOLVP BBSIZ1K NOXINST RESERVED
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
